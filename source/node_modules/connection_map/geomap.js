class GeoMap {

	constructor(arg) {

		this.id = arg.id;
		this.container = arg.container;

		this.x = arg.x;
		this.y = arg.y;
		this.width = arg.width;
		this.height = arg.height;

		this.color = d3.scaleOrdinal(d3.schemeCategory20).domain(d3.range(20));

		this.canvas = this.container.append("g");
		this.canvas.attr("transform", "translate(" + this.x + "," + this.y + ")");

		this.param = {
			projection: {scale: [150]},
			extent: {zoom: [1, 300], translate: [[0, 0], [this.width, this.height]]},
			tooltip: {x: 5, y: -20, on: 400, off: 100},
			elements: {bound: "black", stroke: 0.4, select: "darkred"},
		};

		this.classes = {
			elements: "",
			tooltip: "label label-success",
			hide: "hidden",
		};

		this.setProjection();
		this.setDataset(arg.dataset);

		this.setZoom();
		this.setTooltip();

		this.setClipPath();

		this.setConnection();
	}

	setProjection() {

		this.canvas.append("rect")
			.attr("width", this.width)
			.attr("height", this.height)
			.attr("fill", "lightcyan");

		this.clip = this.canvas.append("g");
		this.view = this.clip.append("g");

		this.projection = d3.geoFahey()
			.translate([this.width/2, this.height/2])
			.scale(this.param.projection.scale);

		this.path = d3.geoPath()
			.projection(this.projection);
	}

	setDataset(data) {

		var that = this;
		var teste = 6;

		this.dataset = data;

		this.elements = this.view.selectAll("path")
			.data(this.dataset.features);

		this.elements.exit()
			.remove();

		this.elements = this.elements.enter()
			.append("path")
			.merge(this.elements)
			.attr("d", this.path)
			.attr("fill", function(d, i) { return that.color((2*d.properties.code + 1) % 20); })
			.attr("stroke", this.param.elements.bound)
			.attr("stroke-width", this.param.elements.stroke)
			.attr("class", this.classes.elements);
	}

	setZoom() {

		var that = this;

		this.zoom = d3.zoom()
			.scaleExtent(this.param.extent.zoom)
			.translateExtent(this.param.extent.translate)
			.on("zoom", function() {
				that.view.attr("transform", d3.event.transform.translate(-that.x/2, -that.y/2));
				that.elements.attr("stroke-width", that.param.elements.stroke/d3.event.transform.k)
			});

		this.zoom(this.canvas);
	}

	setTooltip() {

		var that = this;

		this.tooltip = d3.select("body").append("div")
			.style("position", "absolute")
			.attr("class", this.classes.hide);

		this.elements
			.on("mousemove", function(d) {
				that.tooltip.transition()
					.duration(that.param.tooltip.on);
					
				that.tooltip.html(d.properties.name)
					.style("left", (d3.event.pageX + that.param.tooltip.x) + "px")
					.style("top", (d3.event.pageY + that.param.tooltip.y) + "px")
					.attr("class", that.classes.tooltip);
			})
			.on("mouseout", function(d) {
				that.tooltip.transition()
					.duration(that.param.tooltip.off)
					.attr("class", that.classes.hide);
			});
	}

	setConnection(data) {

		var that = this;
		this.selection = null;

		this.elements.on("click", function(d) {
			that.select(d.properties.code, d.properties.enemies)
		});
	}

	select(primary, secondary) {

		var that = this;

		this.selection = (this.selection == primary)? null: primary;

		if (this.selection == null) {
			primary = null;
			secondary = [];
		}

		this.elements.attr("fill", function(d) {
			
			var code = d.properties.code;
			var fill;

			if (primary == code) {
				fill = that.param.elements.select;
			}
			else if (secondary.includes(code)) {
				fill = that.color((2*code) % 20);
			}
			else {
				fill = that.color((2*code + 1) % 20);
			}

			return fill;
		});
	}

	setClipPath() {

		this.clip.attr("clip-path", "url(#clip-gantt)");

		this.container.append("defs").append("clipPath")
	        .attr("id", "clip-gantt")
	        .append("rect")
	        .attr("opacity", 0)
	        .attr("width", this.width)
	        .attr("height", this.height);
	}

}