class Wordcloud {

    constructor(args) {
        /*
            args = {
                war_id: int,
                x: int,
                y: int,
                width: int,
                height: int,
                container: SVG element,
                id: string
            }
        */
        this.id = args.id;
        this.container = args.container;

        this.x = args.x;
        this.y = args.y;
        this.width = args.width;
        this.height = args.height;

        this.canvas = this.container.append("g")
        this.canvas
            .attr("transform", "translate(" + this.x + "," + this.y + ")")
            .attr("id", this.id);

        this.params = {
            margins: {left: 0, right: 0, top: 0, bottom: 0},
            war_id: args.war_id
        };

        this.setMargins();
        this.setScales();
        this.setDataset(this.getRowFromDataset(args.war_id));

    }

    setMargins() {

        this.width -= (this.params.margins.left + this.params.margins.right);
        this.height -= (this.params.margins.top + this.params.margins.bottom);

        this.view = this.canvas.append("g");

        this.canvas.attr("transform", "translate(" + (this.x + this.params.margins.left) + "," + (this.y + this.params.margins.top) + ")");
    
    }

    setScales() {

        this.relevance_scale = d3.scaleLinear().range([this.height/16, this.height/4]);
        this.color_scale = d3.scaleLinear().range(['indianred', 'lightgray']);
    
    }

    getRowFromDataset(war_id) {

        var row = war_texts.filter(function(d) { return d.war_id == war_id; })[0];
        console.log(row.words)
        return row.words;

    }

    setDataset(data) {

        this.dataset = data;

        this.relevance_scale.domain(d3.extent(this.dataset, function(d) { return d.size; }));
        this.color_scale.domain([0, this.dataset.length - 1]);

        this.generateCloud(data);

    }

    generateCloud(words) {

        var that = this;

        d3.layout.cloud()
            .size([this.width, this.height])
            .words(words)
            .rotate(0)
            // .rotate(function() {
            //     return ~~(Math.random() * 2) * 90;
            // })
            .font("Impact")
            .fontSize(function(d) {
                return that.relevance_scale(d.size);
            })
            .on("end", drawCloud)
            .start();

        function drawCloud(words) {
            
            that.view.append("svg")
                .attr("width", that.width)
                .attr("height", that.height)
                .append("g")
                .attr("transform", "translate(" + ~~(that.width / 2) + "," + ~~(that.height / 2) + ")")
                .selectAll("text")
                .data(words)
                .enter().append("text")
                .style("font-size", function(d) {
                    return d.size + "px";
                })
                .style("font-family", "Impact")
                .style("fill", function(d, i) {
                    return that.color_scale(i);
                })
                .attr("text-anchor", "middle")
                .attr("transform", function(d) {
                    return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                })
                .text(function(d) {
                    return d.text;
                });

        }

    }

}